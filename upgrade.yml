---
- name: Upgrade Ubuntu from 18.04 to 20.04
  hosts: ubuntu_servers
  become: yes

  tasks:
    - name: Create backup directory on target servers
      file:
        path: /var/tmp/backups
        state: directory

    - name: Copy backup script to target servers
      copy:
        src: backup_script.sh
        dest: /usr/local/bin/backup_script.sh
        mode: '0755'

    - name: Execute backup script on target servers
      shell: /usr/local/bin/backup_script.sh
      args:
        chdir: /var/tmp
      become: yes

    - name: Create backup directory on control server
      delegate_to: localhost
      file:
        path: "/var/tmp/backups/{{ inventory_hostname }}"
        state: directory

    - name: Pull backups from target servers to control server
      synchronize:
        src: /var/tmp/backups/
        dest: "/var/tmp/backups/{{ inventory_hostname }}"
        mode: pull
      delegate_to: localhost

    - name: Check file system utilization
      command: df -h /
      register: disk_space

    - name: Fail if disk space utilization is over 40%
      fail:
        msg: "Disk space utilization is over 40%. Aborting upgrade."
      when: (disk_space.stdout | regex_search('(\d+)% /') | int) > 40

    - name: Ensure main repository is in /etc/apt/sources.list
      lineinfile:
        path: /etc/apt/sources.list
        line: "deb http://archive.ubuntu.com/ubuntu/ bionic main restricted"
        state: present

    - name: Ensure universe repository is in /etc/apt/sources.list
      lineinfile:
        path: /etc/apt/sources.list
        line: "deb http://archive.ubuntu.com/ubuntu/ bionic universe"
        state: present

    - name: Ensure multiverse repository is in /etc/apt/sources.list
      lineinfile:
        path: /etc/apt/sources.list
        line: "deb http://archive.ubuntu.com/ubuntu/ bionic multiverse"
        state: present

    - name: Ensure security updates repository is in /etc/apt/sources.list
      lineinfile:
        path: /etc/apt/sources.list
        line: "deb http://security.ubuntu.com/ubuntu bionic-security main restricted"
        state: present

    - name: Ensure security universe repository is in /etc/apt/sources.list
      lineinfile:
        path: /etc/apt/sources.list
        line: "deb http://security.ubuntu.com/ubuntu bionic-security universe"
        state: present

    - name: Ensure security multiverse repository is in /etc/apt/sources.list
      lineinfile:
        path: /etc/apt/sources.list
        line: "deb http://security.ubuntu.com/ubuntu bionic-security multiverse"
        state: present

    - name: Check UFW status
      command: ufw status
      register: ufw_status

    - name: Stop UFW if it is active
      command: ufw disable
      when: "'Status: active' in ufw_status.stdout"

    - name: Check UFW status again
      command: ufw status
      register: ufw_status_after

    - name: Fail if UFW is still active
      fail:
        msg: "UFW is still active. Please disable it manually and retry."
      when: "'Status: active' in ufw_status_after.stdout"

    - name: Update all packages to the latest version
      apt:
        update_cache: yes
        upgrade: dist

    - name: Install the update-manager-core package
      apt:
        name: update-manager-core
        state: present

    - name: Ensure all updates are applied
      command: apt-get dist-upgrade -y
      register: dist_upgrade_result

    - name: Reboot the server after applying updates
      reboot:
        msg: "Reboot initiated by Ansible after applying updates"
        pre_reboot_delay: 30
        post_reboot_delay: 60
      when: dist_upgrade_result.changed

    - name: Upgrade the distribution to Ubuntu 20.04
      command: do-release-upgrade -f DistUpgradeViewNonInteractive
      when: dist_upgrade_result.changed

    - name: Reboot the server after distribution upgrade
      reboot:
        msg: "Reboot initiated by Ansible for OS upgrade"
        pre_reboot_delay: 30
        post_reboot_delay: 60
      when: dist_upgrade_result.changed

    - name: Validate upgrade by checking OS version
      command: lsb_release -r
      register: os_version

    - name: Fail if the OS version is not 20.04
      fail:
        msg: "Upgrade failed. The OS version is not 20.04."
      when: "'20.04' not in os_version.stdout"

